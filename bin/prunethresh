#!/bin/bash
# Author: Luka Ruzic

usage() {
    echo "
USAGE: prunethresh <image> [options]
DESCRIPTION: Given a set of voxel intensity and cluster extent thresholds, prunethresh
             will create a map with integers for each threshold that only include clusters
             that overlap with most conservative clusters (most stringent threshold)
OPTIONS:
   -t vThr cThr [...]
         define pairs of voxel intensity and cluster extent thresholds
         ASSUMES first pair listed is most stringent
   -p vPThr cThr [...]
         same as -t but assumes inverse p map (will apply 1-vThr)
   -o <outputfilename>  (DEFAULT: <image>__pruned)
   -view
         open result in fslview (see pruneview)
   -v
         verbose
DEFAULTS:
  If range of intensities in image is [-1 1]:
    -p .001 3 .005 1 .01 1    
  Else (assume z map):
    -t 3.29 3 2.58 1 1.96 1 
"
    exit ${1:-1}
} >&2

mktempfail() {
    echo "ERROR: mktemp failed to procure temporary file" >&2
    exit 7
}


# PARSE ARGUMENTS
[[ $* =~ -help$ ]] && usage 0
fin=$1; shift
if [ ! $fin ]||[ $(imtest $fin) == 0 ]; then
    echo "No such image file: $fin"
    exit 1
fi

fout=$(remove_ext $fin)__clusters_pruned

if [ "fslstats $fin -R | awk '$1>-1 && $2<1'" ]; then
    maxvthresh=.001
    maxcthresh=3
    vthresh=(.005 .01)
    cthresh=(1 1)
else
    maxvthresh=3.29
    maxcthresh=3
    vthresh=(2.58 1.96)
    cthresh=(1 1)
fi

while [ $1 ]; do
    if [ $1 == "-t" ]||[ $1 == "-p" ]; then
	if [ ! $2 ]||[ ${2:0:1} == "-" ]||[ ! $3 ]||[ ${3:0:1} == "-" ]; then
	    echo "$1 argument is malformed (must be followed by pairs of voxel intensity and cluster extent thresholds)"
	    usage
	fi
	unset vthresh cthresh
	maxvthresh=$2
	maxcthresh=$3
	shift 2
	while [ $2 ]&&[ ${2:0:1} != "-" ]; do
	    if [ ! $3 ]||[ ${3:0:1} == "-" ]; then
		echo "-t argument is malformed (must be followed by pairs of voxel intensity and cluster extent thresholds)"
		usage
	    fi
	    vthresh+=($2)
	    cthresh+=($3)
	    shift 2
	done
	if [ $1 == "-p" ]; then
	    #for ((i=0; i<${vthresh[*]}; i++)); do vthresh[i]=$(echo 1 - ${vthresh[i]} | bc); done
	    vthresh=($(echo ${vthresh[*]} | tr ' ' '\n' | awk '{print 1-$1}'))
	fi
    elif [ $1 == "-o" ]; then
	fout=$2
    elif [ $1 == "-view" ]; then
	view=set
    elif [ $1 == "-v" ]; then
	v=set
    else
	echo UNRECOGNIZED ARGUMENT: $1
	exit 1
    fi
    shift
done



### MAKE TEMPORARY WORKING DIRECTORY
wd=$(mktemp -d "${TMPDIR:-/tmp}/prunethresh.XXXX") || mktempfail
[ $v ] && echo "... MAKING COPY IN TEMPORARY WORKING DIRECTORY $wd"
fslmaths $fin $wd/fin

# sign mask
clusterthresh $wd/fin -t 0 -c 1 -bin -o $wd/sign >/dev/null
# absolute value
fslmaths $wd/fin -abs $wd/fin_abs


[ $v ] && echo "... MAKING THRESHOLD LAYERS"
for ((i=0; i<${#vthresh[*]}; i++)); do
    clusterthresh $wd/fin_abs -t ${vthresh[i]} -c ${cthresh[i]} -o $wd/c_${i} >/dev/null
done
# top threshold is already "pruned", can be absolute valued and binarized
clusterthresh $wd/fin_abs -t $maxvthresh -c $maxcthresh -o $wd/pruned >/dev/null
fslmaths $wd/pruned -abs -bin $wd/pruned

[ $v ] && echo "... INDEXIFYING CLUSTERS"
for i in $wd/c_*; do
    cluster -i $i -t .00001 -o $(remove_ext $i)__ind > /dev/null
done


[ $v ] && echo "... PRUNING"
n=${#vthresh[*]}
for i in $wd/*__ind.*; do
    fslmaths $i -mul $wd/pruned ${i/__ind/__keep}
    { 
	cluster -i ${i/__ind/__keep} -t 1
	cluster -i $i -t 1
    } | awk -F'\t' '$1!="Cluster Index" {print $3}' | sort -n | uniq -c | awk '{if ($1==1) print $2,0; else print $2,'$n'}' > $wd/trimandbin.lst
    intsub $i $wd/trimandbin.lst ${i/__ind/__prunemask}
    let n--
done


[ $v ] && echo "... MERGING PRUNED LAYERS"
mxthr=$(echo 1 + ${#vthresh[*]} | bc)
fslmaths $wd/pruned -mul $mxthr $(for i in $wd/*__prunemask.*; do echo " -max "$i; done) -mul $wd/sign $fout


### open in fslview
[ $view ] && pruneview $fout


### clean up
rm -r $wd

exit 0
