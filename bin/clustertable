#!/bin/bash
# Author: Luka Ruzic

# using this array makes the different atlases easier to deal with
i=1
while read a; do
    atlas_decoder[i]="$a"
    let i++
done < <(atlasquery --dumpatlases)

usage() {
    echo "
Usage: clustertable <stat_map> [options]

Options:
  -t <i>          clustering will be done with a voxelwise intensity threshold of <i> (default: 2.58)
  -c <v>          only clusters with <v> or more voxels are reported (default: 1)
  -o <filename>   will output to <filename>.csv (DEFAULT: cluster_report_<stat_map>_t<i>_v<v>.csv)
  -neg            report negative intensities (DEFAULT: only positive intensities)
  -lm             generate lines for local maxima
  -d <mm>         only report local maxima separated by <mm> (cluster's --peakdist=<mm> option) (DEFAULT: 0)
  -con <6|18|26>  change which voxels count as connected (in terms of how many count) (cluster's --connectivity=<n> option) (DEFAULT: 26)
  -icbm           use ICBM (Lancaster) coordinate conversion to Talairach space (DEFAULT: Brett conversion)
  -tal            include columns with Talairach coordinates
  -td             append a field containing the readout from the Talairach Daemon
  -a [<atlas code> [...]]
       append a field containing the readout from an FSL atlas
       if no <atlas code> is given, report from Harvard-Oxford atlases
       (example argument: -a 6 7 1)
         ATLAS CODES:"
    for (( i=1; i<${#atlas_decoder[*]} ; i++ )); do echo "            $i: ${atlas_decoder[i]}"; done
    echo "
       NOTE: ATLAS CODES will change dynamically with what atlasquery provides
  -athr <p>
       only report areas that are more than <p>% probable

Description:
  -generates a cluster report for an entire zstat map
  -report includes for every cluster of voxels above the zthreshold:
    -region name (actually the nearest gray matter on a Talairach atlas)
    -Brodmann Area number
    -max statistic
    -number of voxels
    -MNI voxel coordinates of the Max

Note: will work on lower levels, BUT ONLY inside the <analysis>.feat/stats directory
    Tip: to generate reports for all the stat maps in a directory, use clusterall
" >&2

    exit ${1:-1}
}

# Hidden Options:
# in order to keep all the clusters commands in a clusterall from overwriting each other to the no_clusters file
# clusters will look for a --no_clusters_file <file> option so that it can write them all independently, to be concatenated afterwards by clusterall
#    echo "     -odir <dir>      place output files in <dir>"    # this is not publicly viewable because it is only designed for interaction with clusterall



mktempfail() {
    echo "ERROR: failed to create temporary file with mktemp; exiting" >&2
    exit 1
}


### PARSE ARGUMENTS
if [ ! $1 ]; then
    usage
elif [[ "$*" =~ -help ]]; then
    usage
fi

# defaults
ithr=2.58   # default Z threshold
voxthr=1   # smallest number of voxels to report on
# read arguments
while [ $1 ]; do
    if [ $1 == "-t" ]&&[ $2 ]; then
	ithr=$2
	shift 2
    elif [ $1 == "-c" ]&&[ $2 ]; then
	voxthr=$2
	shift 2
    elif [ $1 == "-o" ]&&[ $2 ]; then
	fout=${2%.csv}.csv
	shift 2
    elif [ $1 == "-neg" ]; then
	neg=set
	shift
    elif [ $(imtest $1) -eq 1 ]; then  # imtest is FSL's image test
	if [ $statmap ]
	then  # one image has already been given
	    echo "ERROR: TOO MANY INPUTS" >&2
	    echo "$zstat" >&2
	    echo "$1" >&2
	    usage
	fi
	statmap=$1
	shift
    elif [ $1 == "-lm" ]; then
	runlocalmaxima=1
	shift
    elif [ $1 == "-d" ]&&[ $2 ]; then
	extraopts+=" --peakdist=$2"
	shift 2
    elif [ $1 == "-con" ]&&[ $2 ]; then
	extraopts+=" --connectivity=$2"
	shift 2
    elif [ $1 == "-icbm" ]; then
	icbm="-icbm"
	shift
    elif [ $1 == "-tal" ]; then
	tal=set
	shift
    elif [ "$1" == "-a" ]; then
	while [ $2 ]&&[[ ! "$2" =~ ^- ]]; do
	    if [[ "$2" =~ [^0-9] ]]||[ $2 -lt -0 ]||[ $2 -gt ${#atlas_decoder[*]} ]; then
		echo "ERROR: invalid atlas code: $2"
		exit 1
	    fi
	    atlas_codes+=($2)
	    shift
	done
	# if no codes specified, default to Harvard-Oxford atlases
	if [ ${#atlas_codes[*]} -eq 0 ]; then
	    atlas_codes=($(atlasquery --dumpatlases | awk '/Harvard-Oxford/ {print NR}'))
	fi
	shift
    elif [ "$1" == "-athr" ]; then
	if [ $2 ]&&[[ "$2" =~ ^[0-9]*$ ]]; then
	    atlas_thr="$2"
	    shift 2
	else
	    error "INVALID argument to -athr: $2"
	    exit 1
	fi
    elif [ $1 == "-odir" ]&&[ $2 ]; then
	if [ ! -d $2 ]; then
	    echo "cannot find $2"
	else
	    odir=$2"/"
	    shift 2
	fi
    elif [ $1 == "-td" ]; then
	td=set
	shift
    elif [ "$1" == "--no_clusters_file" ]; then
	noclusterfile=$2
	shift 2
    else
	echo "UNRECOGNIZED INPUT: $1" >&2
	exit 1
    fi
done


### SET UP
mni_brain=$(findMNI)
wd=$(mktemp -d "${TMPDIR:-/tmp}/clustertable.XXXX")
here=$PWD
[ $noclusterfile ] || noclusterfile=${here}/${odir}no_clusters.txt


# discover level (based on image dimensions)
[ $(printf "%.0f" $(fslval $statmap pixdim3)) -eq 2 ] && level=2 || level=1


### NAME OUTPUTFILE (if necessary)
if [ ! $fout ]; then
    if [ $level -eq 1 ]; then
	fout="${here}/${odir}cluster_report_$(remove_ext $statmap)_t${ithr}_v${voxthr}.csv"
    else                                                        # we're dealing with a higher level (BY FAR the most common usage)
	# if clusters is being run inside a gfeat, include the cope number
	if [ $(echo $here | grep -c gfeat) -eq 1 ]; then
	    copenum=$(pwd | grep -o 'cope[0-9]\{1,2\}')
	    fout="${here}/${odir}cluster_report_${copenum}_$(remove_ext $statmap)_t${ithr}_v${voxthr}.csv"
	else
	    fout="${here}/${odir}cluster_report_$(remove_ext $statmap)_t${ithr}_v${voxthr}.csv"
	fi
    fi
fi


### DO CLUSTERING
if [ $level -eq 1 ]; then  # prepare argument for FLIRT (registration from scanner space to MNI space)
    regopts="-x ../reg/example_func2standard.mat --stdvol=$mni_brain"
fi

# get cluster information for positive intensities
cluster -i $statmap -t $ithr $regopts --mm --olmax=$wd/maxima_pos -n 902629 $extraopts \
    | awk 'NR>1 && $2>='$voxthr' {print $2,$3,$4,$5,$6,$1}' > $wd/clusters_pos

# get the first and last index numbers
posindexrange=($(awk '{i=$6} NR==1 {print i} END {print i}' $wd/clusters_pos))
if [ $posindexrange ]; then
    # prune maxima
    awk 'NR==1 {next} $1>='${posindexrange[1]}' {print $0}' $wd/maxima_pos > $wd/maxima_pos_pruned
    mv $wd/maxima_pos{_pruned,}
else
    posindexrange=0
fi

if [ $neg ]; then
    # invert statmap
    fslmaths $statmap -mul -1 $wd/negstatmap
    
    ## generate information on negative intensities
    # (adjust indexes by adding posindexrange[1] (highest index from positive map) so that they don't overlap with indexes from positive clusters)
    cluster -i $wd/negstatmap -t $ithr $regopts --mm --olmax=$wd/maxima_neg -n 902629 $extraopts \
	| awk 'NR>1 && $2>='$voxthr' {print $2, $3*-1, $4, $5, $6, $1+'${posindexrange[0]}'}' > $wd/clusters_neg

    # get the first and last index numbers
    negindexrange=($(awk '{i=$6} NR==1 {print i} END {print i}' $wd/clusters_neg))
    if [ $negindexrange ]; then
        # prune/adust maxima
	awk 'NR==1 {next} {$1+='${posindexrange[0]}'} $1>='${negindexrange[1]}' {print $1,$2*-1,$3,$4,$5}' $wd/maxima_neg > $wd/maxima_neg_pruned
	mv $wd/maxima_neg{_pruned,}
    fi
fi


### GENERATE REPORT
# make header
# standard columns
stdcols=",max,nvox,x,y,z"
# tal header
talcols=",xtal,ytal,ztal"
# td header
[ $td ] && td_header=",region,BA"
# atlas titles
for a in ${atlas_codes[*]}; do
    atlas_header+=",${atlas_decoder[a]}"
done
# if reporting local maxima, include cluster index column so that maxima can easily be matched up with their cluster peaks
[ $runlocalmaxima ] && indexcol=",index"
# print header
echo ${stdcols}${talcols}${td_header}${atlas_header}${indexcol} > $fout

if [ $(cat $wd/clusters_{pos,neg} 2>/dev/null | wc -l) -ne 0 ]; then
    ### MAKE A LINE OF REPORT PER CLUSTER FOUND
    n=0
    for f in $wd/clusters_{pos,neg}; do
	[ ! -f $f ] && continue

	case ${f##*_} in
	    "pos") printf "POSITIVE:\n" >> $fout;;
	    "neg") printf "NEGATIVE:\n" >> $fout;;
	esac
	
	while read voxels max x y z i; do
	    let n++
	    clnum[i]=$n
	    
	    # save number of voxels
	    voxels[i]=$voxels
	    
	    [ $tal ] && talcoords=$(mni2tal $x $y $z | awk '{print ","$1","$2","$3)}')

	    if [ $td ]; then # query tal daemon
		tdfield=($(mm2label $x $y $z $icbm))
		td_label[i]=","${tdfield[0]}"("${tdfield[1]}"),"${tdfield[2]:-N/A}
	    fi
	    
 	    # output to report
	    [ $atlas_codes ] && atlas_labels="$(mm2label $x $y $z $icbm -a ${atlas_codes[*]} -athr $atlas_thr | while read line; do echo -n ",$line"; done)"
	    
	    [ $runlocalmaxima ] && index=",         cluster$i"
	
	    # PRINT
	    echo "${clnum[i]},$max,$voxels,$x,$y,$z${talcoords}${td_label[i]}${atlas_labels}${index}" >> $fout
	done < $f
    done
    
    if [ $runlocalmaxima ]; then	
	# print more header stuff
	printf "\n\n***LOCAL MAXIMA***\n" >> $fout    
	echo "${stdcols}${talcols}${td_header}${atlas_header},cluster affiliation" >> $fout

	nn=0
	for f in $wd/maxima_[pn][oe][sg]; do
	    let nn++
	    if [ $nn -gt 1 ]; then
		printf "NEGATIVES:\n" >> $fout
	    fi
            ### REPORT ON LOCAL MAXIMA
	    while read i max x y z; do
		[ $tal ] && talcoords=$(mni2tal $x $y $z | awk '{print ","$1","$2","$3)}')

		if [ $td ]; then
	            # get TD labeling
		    [ $noname ] || tdfield=($(mm2label $x $y $z $icbm))
		    [ ${tdfield[0]} ] && this_td_label=","${tdfield[0]}"("${tdfield[1]}"),"${tdfield[2]:-N/A} || this_td_label="no label"
		fi

	        # get FSL atlas labeling
		[ $atlas_codes] && atlas_labels="$(mm2label $x $y $z $icbm -a ${atlas_codes[*]} -athr $atlas_thr | while read line; do echo -n ",$line"; done)"

                # PRINT
		echo "${clnum[i]},$max,$voxels,$x,$y,$z${talcoords}${this_td_label}${atlas_labels},            cluster$i ${td_label[i]}" >> $fout
	    done < $f
	done
    fi
    
    echo "generated $fout"
    
else ### THERE ARE NO CLUSTERS, ADD TO LIST OF CLUSTERLESS MAPS
    if [ $copenum ]; then
	echo "no clusters in ${copeNum}, ${statmap}" | tee -a $noclusterfile
    else
	echo "no clusters in ${statmap}"  | tee -a $noclusterfile
    fi
fi

exit 0
