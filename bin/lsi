#!/bin/bash
# Author: Luka Ruzic

usage() {
    echo "
Usage: lsi [option] [path] [...]
Description: list images along with some of their properties
             by default, the 4 dimensions of the image are printed (in x, y, and z voxels and volumes)
             see Options for other available properties

Paths:
  lsi will take a path to:
     a file:         list file if it is an image
     a directory:    list any image files inside directory
  NOTE about ANALYZE files:
     if you give a path to a directory containing an ANALYZE format image, only the .img file will get a row
     if you give paths to both the .hdr and .img files for an ANALYZE format image, the .img AND the .hdr will get rows

Options
  -d
     include columns voxel dimensions (in x, y, and z mm)
  -v
     include column for image volume in cubic mm
  -V
     include column for number of non-zero voxels
  -M
     include column for mean of non-zero voxels
  -R
     include columns for min and max intensities
  -dt
     include column for data_type
  -ft
     include column for filetype
  --all
     use -V -M -R and --h
  --no-dim
     suppress printing of the 4 dimension columns
  --h
     print header
  -k <image>
     for any of the options above, first multiply the images listed by <image>
  -l <thr>
     for any of the options above, use lower threshold <thr>
  -u <thr>
     for any of the options above, use upper threshold <thr>
NOTE: the extra columns are generated by fslstats
NOTE: fslstats will treat all NaNs as 0s (-n option)
      however, the -k -l and -u options do not have the positionality/reusability they do in fslstats commands:
          they needn't come before the options they modify, and only the last ones listed will be used
"
    exit ${1:-1}
}

[[ " $* " =~ " "-*help" " ]] && usage 0

### SET DEFAULTS
dim=set
### PARSE ARGUMENTS
args="$(echo $* | tr ' ' '\n' | grep "^-")"
while [ "$1" ]; do
    if [ -d "$1" ]; then
	for i in $(ls $1/*.{img,nii.gz,nii} 2> /dev/null); do
	    images+=($i)
	done
    elif [ -f "$1" ]; then	
	[ $(imtest $1) -eq 1 ] && images+=($1)
    elif [ "$1" == "-d" ]; then
	pixdim=set
    elif [ "$1" == "-V" ]; then
	volumenz=set
    elif [ "$1" == "-v" ]; then
	volume=set
    elif [ "$1" == "-M" ]; then
	mean=set
    elif [ "$1" == "-R" ]; then
	range=set
    elif [ "$1" == "-ft" ]; then
	filetype=set
    elif [ "$1" == "-dt" ]; then
	datatype=set
    elif [ "$1" == "--all" ]; then
	all=set
    elif [ "$1" == "--no-dim" ]; then       
	unset dim
    elif [ "$1" == "--h" ]; then
	header=set
    else
	echo "UNRECOGNIZED OPTION: $1" >&2
	usage
    fi
    shift
done	

#if [ ! $1 ]||[ ${1:0:1} == "-" ]; then lsi . $*; exit 0; fi
if [ ! -n "${images[*]}" ]; then 
    for i in $(ls ./*.{img,nii.gz,nii} 2> /dev/null); do
	images+=($i)
    done
fi

### MAIN

# find longest image name string
wname=$(for i in ${images[*]}; do echo ${#i}; done | sort -n | tail -1)
wdim=6
wpixdim=9
wnzvolvox=10
wnzvolmm=12
wvolvox=$(echo $wnzvolvox + 3 | bc)
wvolmm=$(echo $wnzvolmm + 3 | bc)
wmean=8
wrange=9
wdatatype=10
wfiletype=10


if [ $all ]||[ $header ]; then
    printf "%-${wname}s  " IMAGE

    if [ $filetype ]; then
	printf " %${wdatatype}s" FILETYPE
    fi
    if [ $datatype ]; then
	printf " %${wdatatype}s" DATA_TYPE
    fi
    if [ $pixdim ]; then
	#printf "%${wpixdim}s" Xmm Ymm Zmm Tval
	printf "%${wpixdim}s" PIXDIM{1,2,3,4}
    fi
    if [ $dim ]; then
	#printf "%${wdim}s" X Y Z T
	printf "%${wdim}s" DIM{1,2,3,4}
    fi
    if [ $all ]||[ $volumenz ]; then
	printf " %${wnzvolvox}s" VOXELS
	printf " %${wnzvolmm}s" mm^3
    fi
    if [ $volume ]; then
	printf " %${wvolvox}s" allVOXELS
	printf " %${wvolmm}s" allmm^3
    fi
    if [ $all ]||[ $mean ]; then
	printf " %${wmean}s" MEAN
    fi
    if [ $all ]||[ $range ]; then
	printf " %${wrange}s" MIN MAX
    fi

    # end the row
    echo
fi

# loop through images
for image in ${images[*]}; do
    # print image name
    printf "%-${wname}s  " ${image//\/\//\/}

    # print additional stats
    if [ $filetype ]; then
	fslinfo $image | awk '/file_type/ {printf(" %'${wfiletype}'s",$2)}'
    fi
    if [ $datatype ]; then
	fslinfo $image | awk '/data_type/ {printf(" %'${wdatatype}'s",$2)}'
    fi
    if [ $pixdim ]; then
	#printf "%${wpixdim}.3f" $(for d in 1 2 3; do fslval $image pixdim$d; done)
	fslinfo $image | awk '/pixdim[1-4]/ {printf("%'${wpixdim}'.3f",$2)}'
    fi
    if [ $dim ]; then
	#printf "%${wdim}d" $(for d in 1 2 3 4; do fslval $image dim$d; done)
	fslinfo $image | awk '/^dim[1-4]/ {printf("%'${wdim}'d",$2)}'
    fi
    if [ $all ]||[ $volumenz ]; then
	printf " %${wnzvolvox}.0f %${wnzvolmm}.2f" $(fslstats $image -n -V)
    fi
    if [ $volume ]; then
	printf " %${wvolvox}.0f %${wvolmm}.2f" $(fslstats $image -n -v)
    fi
    if [ $all ]||[ $mean ]; then
	printf " %${wmean}.2f" $(fslstats $image -n -M)
    fi
    if [ $all ]||[ $range ]; then
	printf " %${wrange}.2f" $(fslstats $image -n -R)
    fi

    # end the row
    echo
done


exit 0
