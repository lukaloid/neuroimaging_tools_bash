#!/bin/bash
# Author: Luka Ruzic

usage() {
    echo "
USAGE: imagethresher <input_map> [options]
DESCRIPTION: applies voxel intensity and cluster size thresholds to <input_map>
OPTIONS:
 Thresholding:
   -t <i> [...]  threshold voxels at intensity <i>  (DEFAULT: 2.58)
   -p <p> [...]  threshold voxels at intensity 1-<p> (for inverse p maps)
   -c <v> [...]  threshold clusters at size <v> voxels  (DEFAULT: 1, i.e. no thresholding)
   note: use EITHER -t OR -p, not both
   note: if multiple thresholds are given, will use -multi mode
           (must give same number of -c and -t/-p thresholds)
 Modes:
   -thresh          remaining voxels retain value (DEFAULT)
   -bin             binarize results
   -index           index results (each cluster a different integer intensity, numbered by size) 
                    (positive intensities only)
   -multi <table>   create map with multiple thresholds found in <table> (each row has one t and one c threshold)
                      voxels that meet nth (lowest) threshold will have intensity 1
                      voxels that meet 1st (highest) threshold will have intensity n
 Other:
   -pos                only include clusters of positive intensities  (DEFAULT: include neg)
   -o <filename>       (DEFAULT: <input_map>__clusters{,_bin,_bins,_idx})

Note: -c option requires python (with numpy and nibabel)
" >&2

    exit ${1:-1}
}

# hidden option: (not working yet)
#   -prune           like -multi, but only retains clusters that survive most stringent threshold                    
#


mktempfail() {
    echo "ERROR: mktemp failed to procure temporary file" >&2
    exit 7
}


invert_indices() {
# usage: invert_indices fin fout

python <<EOF
import numpy as np
import nibabel as nib

# load data
img = nib.load('$1')
d = img.get_data()

# invert index ordering (into negatives to avoid overwriting)
n = np.unique(d).max()
for i in np.r_[1:n+1]:
  d[d==i] -= n+1

# invert index sign
for i in np.unique(d):
  d[d==i] *= -1

# write
img.to_filename('$2')

EOF

}


### ERROR-CHECKING
[ $# -lt 1 ] && usage
[[ "$*" =~ -help ]] && usage 1

### PARSE ARGUMENTS
map=$(remove_ext $1); shift
if [ $(imtest $map) == 0 ]; then
    echo "ERROR: not a valid image: $map" >&2
    usage
fi
#fslchfiletype NIFTI_GZ $map

ithresh=2.58
cthresh=1
while [ $1 ]; do
    if [ $1 == "-t" ]; then
	unset ithresh
	while [ $2 ]&&[ ${2:0:1} != "-" ]; do
	    ithresh+=($2)
	    shift
	done
	shift
    elif [ $1 == "-p" ]; then
	unset ithresh
	while [ $2 ]&&[ ${2:0:1} != "-" ]; do
	    ithresh+=($(echo 1 - $2 | bc))
	    shift
	done
	shift
    elif [ $1 == "-c" ]||[ $1 == "-v" ]; then  # -v for backwards compatibility
	unset cthresh
	while [ $2 ]&&[ ${2:0:1} != "-" ]; do
	    cthresh+=($2)
	    shift
	done
	shift
    elif [  $1 == "-thresh" ]; then
	thresh=set
	unset idx bin
	shift
    elif [ $1 == "-bin" ]; then
	bin=set
	unset idx thresh
	shift
    elif [ $1 == "-index" ]; then
	idx=set
	unset bin
	shift
    elif [ $1 == "-multi" ]; then
	multi=set
	table=$2 
	shift 2
    elif [ $1 == "-prune" ]; then
	prune=set
	shift
    elif [ $1 == "-pos" ]; then
	pos_only=set
	shift
    elif [ $1 == "--debug" ]; then
	debug=set
	shift
    elif [ $1 == "-o" ]; then
	fout=$(remove_ext $2)
	shift 2
    else 
	echo "UNRECOGNIZED ARGUMENT: $1" >&2
	usage
    fi
done

# make temporary working directory
wd=$(mktemp -d "${TMPDIR:-/tmp}/imagethresher.XXXX") || mktempfail
[ $debug ] && echo working directory: $wd

# if multiple thresholds given, write table
if [ ${#ithresh[*]} -gt 1 ]||[ ${#cthresh[*]} -gt 1 ]; then
    # error check
    if [ ${#ithresh[*]} -ne ${#cthresh[*]} ]; then
	echo "ERROR: differing number of voxel (${#ithresh[*]}), cluster (${#cthresh[*]}) thresholds"
	exit 1
    fi

    [ $prune ] || multi=set
    table=$wd/table
    for ((i=0; i<${#ithresh[*]}; i++)); do
	echo ${ithresh[i]} ${cthresh[i]}
    done > $table
fi

# if -c is selected then use -pos
[ $idx ] && pos_only=set

# determine output filename
if [ ! $fout ]; then
    if [ $idx ]; then
	fout=${map}__clusters_idx
    elif [ $bin ]; then
	fout=${map}__clusters_bin
    elif [ $multi ]; then
	fout=${map}__clusters_bins
    elif [ $prune ]; then
	fout=${map}__cluster_pruned
    else
	fout=${map}__clusters
    fi
fi


### MAIN
if [ $prune ]; then
    prunethresh $map -t $(cat $table) -o $fout

    rm -r $wd
    exit 0

elif [ $multi ]; then
    # produce imagethresher'd maps according to $table
    i=0;
    while read t v; do
	let i++
	#printf "%2d %9.4f %5d\n" $i $t $v
	imagethresher $map -t $t -c $v -bin -o $wd/map$i > /dev/null
    done < <(grep -vE "^ *#|^ *$" $table | sort -n -k 1)  # ignore comments and blank lines
    let n=i

    # merge imagethresher'd maps
    fslmaths $map -mul 0 $fout
    for i in $(seq $n); do
	fslmaths $wd/map$i -add $fout $fout
    done

    [ $(imtest $fout) != 0 ] && echo made $fout || echo "Something went wrong: $fout not a valid image" >&2

    rm -r $wd
    exit 0

else # default, index, bin
    ### CLUSTERING
    # create indexed image of positive clusters (posclustermap) and list of clusters (posclusterlist)
    cluster -i $map -t $ithresh -o $wd/posclustermap > $wd/posclusterlist

    # find index of smallest allowable cluster
    threshindex=$(awk 'NR==2 {lastindex=$1+1} NR>1 && $2>='$cthresh' {lastindex=$1} END {print lastindex}' $wd/posclusterlist)

    # threshold for cluster size (using index of smallest allowable cluster)
    # binarize resulting thresholded map
    fslmaths $wd/posclustermap -thr $threshindex -bin $wd/clustermask

    # repeat procedure on negative intensities
    if [ ! $pos_only ]; then
        # invert target map
	fslmaths $map -mul -1 $wd/negmap

        # create indexed image of clusters (negclustermap) and list of clusters (negclusterlist)
	cluster -i $wd/negmap -t $ithresh -o $wd/negclustermap > $wd/negclusterlist

        # find index of smallest allowable cluster
	negthreshindex=$(awk 'NR==2 {lastindex=$1+1} NR>1 && $2>='$cthresh' {lastindex=$1} END {print lastindex}' $wd/negclusterlist)

        # threshold inverted map, binarize, (invert if signed binarization will be done), and combine with thresholded positive map
	fslmaths $wd/negclustermap -thr $negthreshindex -bin $([ $bin ] && echo " -mul -1 ") -add $wd/clustermask $wd/clustermask
    fi


    ### PRODUCE OUTPUT
    if [ $idx ]
    then  # make map where voxel intensities = cluster indexes, where 1 = largest cluster, 2 = second largest, etc 
        # produce cluster index map (with -o option)
	cluster -i $wd/clustermask -t 1 -o $wd/indexed_backwards >/dev/null
        # invert the index order
	invert_indices $(ls $wd/indexed_backwards*) $wd/indexed
        # move into place (fslmaths to abstract over file type)
	fslmaths $wd/indexed $fout
    elif [ $bin ]
    then  # to this point we've been representing our thresholds with making a binarized mask, so no further transformation is necessary
	fslmaths $wd/clustermask $fout
    else  # this is the default: multiply the input image by our thresholded (binarized) mask
	fslmaths $map -mul $wd/clustermask $fout
    fi
    
    [ $(imtest $fout) == 0 ] && echo "Something went wrong: $fout not a valid image" >&2 && exit 1
    echo made $fout

fi

exit 0
