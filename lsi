#!/bin/bash
# Author: Luka Ruzic

usage() {
    {
	echo "Usage: lsi [option] [path] [...]"
	echo "Description: list images along with some of their properties"
	echo "             by default, the 4 dimensions of the image are printed (in x, y, and z voxels and volumes)"
	echo "             see Options for other available properties"
	echo
	echo "Paths:"
	echo "  lsi will take a path to:"
	echo "     a file:         list file if it is an image"
	echo "     a directory:    list any image files inside directory"
	echo "  NOTE about ANALYZE files:"
	echo "     if you give a path to a directory containing an ANALYZE format image, only the .img file will get a row"
	echo "     if you give paths to both the .hdr and .img files for an ANALYZE format image, the .img AND the .hdr will get rows"
	echo
	echo "Options"
	echo "  -d"
	echo "     include columns voxel dimensions (in x, y, and z mm)"
	echo "  -v"
	echo "     include a column for image volume in cubic mm"
	echo "  -V"
	echo "     include a column for number of non-zero voxels"
	echo "  -M"
	echo "     include a column for mean of non-zero voxels"
	echo "  -R"
	echo "     include columns for min and max intensities"
	echo "  --all"
	echo "     use -V -M -R and --h"
	echo "  --no-dim"
	echo "     suppress printing of the 4 dimension columns"
	echo "  --h"
	echo "     print header"
#	echo "  -k <image>"
#	echo "     for any of the options above, first multiply the images listed by <image>"
#	echo "  -l <thr>"
#	echo "     for any of the options above, use lower threshold <thr>"
#	echo "  -u <thr>"
#	echo "     for any of the options above, use upper threshold <thr>"
	echo "NOTE: the extra columns are generated by fslstats"
	echo "NOTE: fslstats will treat all NaNs as 0s (-n option)"
#	echo "      however, the -k -l and -u options do not have the positionality/reusability they do in fslstats commands:"
#	echo "          they needn't come before the options they modify, and only the last ones listed will be used"
    }

    exit ${exnum:1}
}


### SET DEFAULTS
DIM=set
### PARSE ARGUMENTS
if [ ! $1 ]||[ ${1:0:1} == "-" ]; then lsi . $*; exit 0; fi

while [ "$1" ]; do
    if [[ "$1" =~ help$ ]]; then
	exnum=0
	usage
    elif [ -d "$1" ]; then
	for i in `ls $1/*.{img,nii.gz,nii} 2> /dev/null`; do
	    IMAGES+=($i)
	done
    elif [ -f "$1" ]; then	
	[ `imtest $1` -eq 1 ] && IMAGES+=($1)
    elif [ "$1" == "-d" ]; then
	PIXDIM=set
    elif [ "$1" == "-V" ]; then
	VOLUME=set
    elif [ "$1" == "-v" ]; then
	VOLUMEmm=set
    elif [ "$1" == "-M" ]; then
	MEAN=set
    elif [ "$1" == "-R" ]; then
	RANGE=set
    elif [ "$1" == "--all" ]; then
	ALL=set
    elif [ "$1" == "--no-dim" ]; then       
	unset DIM
    elif [ "$1" == "--h" ]; then
	HEADER=set
    else
	echo "UNRECOGNIZED OPTION: $1" >&2
	usage
    fi
    shift
done	



### MAIN

# find longest image name string
wname=`for i in ${IMAGES[*]}; do echo ${#i}; done | sort -n | tail -1`
wdim=5
wpixdim=7
wvol=9
wvolmm=`echo $wvol + 3 | bc`
wmean=8
wrange=9


if [ $ALL ]||[ $HEADER ]; then
    printf "%-${wname}s  " IMAGE

    if [ $PIXDIM ]; then
	printf "%${wpixdim}s" Xmm Ymm Zmm
    fi
    if [ $DIM ]; then
	printf "%${wdim}s" X Y Z T
    fi
    if [ $ALL ]||[ $VOLUME ]; then
	printf " %${wvol}s" VOXELS
    fi
    if [ $VOLUMEmm ]; then
	printf " %${wvolmm}s" mm^3
    fi
    if [ $ALL ]||[ $MEAN ]; then
	printf " %${wmean}s" MEAN
    fi
    if [ $ALL ]||[ $RANGE ]; then
	printf " %${wrange}s" MIN MAX
    fi

    # end the row
    echo
fi

# loop through images
for image in ${IMAGES[*]}; do
    # print image name
    printf "%-${wname}s  " $image

    # print additional stats
    if [ $PIXDIM ]; then
	printf "%${wpixdim}.3f" $(for d in 1 2 3; do fslval $image pixdim$d; done)
    fi
    if [ $DIM ]; then
	printf "%${wdim}d" $(for d in 1 2 3 4; do fslval $image dim$d; done)
    fi
    if [ $ALL ]||[ $VOLUME ]; then
	printf " %${wvol}.0f" `fslstats $image -n -V | awk '{print $1}'`
    fi
    if [ $VOLUMEmm ]; then
	printf " %${wvolmm}.2f" `fslstats $image -n -v | awk '{print $1}'`
    fi
    if [ $ALL ]||[ $MEAN ]; then
	printf " %${wmean}.2f" `fslstats $image -n -M`
    fi
    if [ $ALL ]||[ $RANGE ]; then
	printf " %${wrange}.2f" `fslstats $image -n -R`
    fi

    # end the row
    echo
done


exit 0
